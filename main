#include <bits/stdc++.h>
using namespace std;

bool isDream(string letters, int n) {
  if(letters.at(n) == 'd' 
     && letters.at(n + 1) == 'r'
     && letters.at(n + 2) == 'e'
     && letters.at(n + 3) == 'a'
     && letters.at(n + 4) == 'm') {
    return true;
  } else {
    return false;
  }
}

bool isDreamer(string letters, int n) {
  if(isDream(letters, n)
     && letters.at(n + 5) == 'e'
     && letters.at(n + 6) == 'r') {
    return true;
  } else {
    return false;
  }
}

bool isErase(string letters, int n) {
  if(letters.at(n) == 'e' 
     && letters.at(n + 1) == 'r'
     && letters.at(n + 2) == 'a'
     && letters.at(n + 3) == 's'
     && letters.at(n + 4) == 'e') {
    return true;
  } else {
    return false;
  }
}

bool isEraser(string letters, int n) {
  if(isErase(letters, n)
     && letters.at(n + 5) == 'r') {
    return true;
  } else {
    return false;
  }
}

bool disassemble(string lettersIn, int n) {
  if (lettersIn.at(n) != 'd' && lettersIn.at(n) != 'e') {
    return false;
  } else if (lettersIn.at(n) == 'd') {
    if (lettersIn.size() < n + 5 || lettersIn.size() == n + 6) {
      return false;
    } else if (lettersIn.size() == n + 5) {
      if (isDream(lettersIn, n)) {
        return true;
      } else {
        return false;
      }
    } else if (lettersIn.size() == n + 7) {
      if (isDreamer(lettersIn, n)) {
        return true;
      } else {
        return false;
      }
    } else {
      if (isDreamer(lettersIn, n)) {
        if(disassemble(lettersIn, n + 7)){
          return true;
        } else if (isDream(lettersIn, n)) {
          return disassemble(lettersIn, n + 5);
        }
      } else if (isDream(lettersIn, n)) {
        return disassemble(lettersIn, n + 5);
      }
    }
  } else if (lettersIn.at(n) == 'e') {
    if (lettersIn.size() < n + 5) {
      return false;
    } else if (lettersIn.size() == n + 5) {
      if (isErase(lettersIn, n)) {
        return true;
      } else {
        return false;
      }
    } else if (lettersIn.size() == n + 6) {
      if (isEraser(lettersIn, n)) {
        return true;
      } else {
        return false;
      }
    } else {
      if (isEraser(lettersIn, n)) {
        if(disassemble(lettersIn, n + 6)){
          return true;
        } else if (isErase(lettersIn, n)) {
          return disassemble(lettersIn, n + 5);
        }
      } else if (isErase(lettersIn, n)) {
        return disassemble(lettersIn, n + 5);
      }
    }
  }   
  
  return false;
}

int main() {
  string S;
  cin >> S;
  
  if(disassemble(S, 0)) {
    cout << "YES" << endl;
  } else {
    cout << "NO" << endl;
  }   
    
  return 0;
}
